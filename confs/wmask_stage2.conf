general {
    base_exp_dir = ./exp/CASE_NAME/wmask_multi_stage
    recording = [
        ./,
        ./models
    ]
}

dataset {
    stage = 2
    data_dir = /data/yesheng/data/dtu/CASE_NAME
    training_views = [25, 22, 28]
    render_cameras_name = cameras_sphere.npz
    object_cameras_name = cameras_sphere.npz
}

train {
    learning_rate = 5e-4
    learning_rate_alpha = 0.05
    start_iter = 10000
    end_iter = 30000

    batch_size = 400
    validate_resolution_level = 1
    warm_up_end = 5000
    anneal_end = 0
    use_white_bkgd = False

    save_freq = 2000
    val_freq = 1000
    val_mesh_freq = 2000
    report_freq = 100
    clip_freq = 20
    stop_clip = 50000

    color_weight = 1.0
    igr_weight = 0.1
    mask_weight = 0.1
    clip_weight = 0.0
    normal_tv_weight = 0.0
    depth_tv_weight = 0.0
    normal_weight = 0.0
    depth_weight = 0.0
}

model {
    nerf {
        D = 8,
        d_in = 4,
        d_in_view = 3,
        W = 128,
        multires = 3,
        multires_view = 2,
        output_ch = 4,
        skips=[4],
        use_viewdirs=True
    }

    cascaded_network {
        stage = 2
        d_in_1 = 3
        d_out_1 = 257
        d_hidden_1 = 256
        n_layers_1 = 4
        skip_in_1 = [3]
        multires_1 = 3
        d_in_2 = 3
        d_out_2 = 257
        d_hidden_2 = 256
        n_layers_2 = 2
        skip_in_2 = []
        multires_2 = 6
        bias = 0.5
        scale = 1.0
        geometric_init = True
        weight_norm = True
    }

    variance_network {
        init_val = 0.3
    }

    rendering_network {
        stage = 2
        d_feature = 256
        mode = idr
        d_in = 9
        d_out = 3
        d_hidden = 256
        n_layers = 4
        weight_norm = True
        multires_view = 4
        squeeze_out = True
    }

    neus_renderer {
        n_samples = 64
        n_importance = 64
        n_outside = 0
        up_sample_steps = 2     # 1 for simple coarse-to-fine sampling
        perturb = 1.0
    }
}